package graphql

import com.tngtech.archunit.core.domain.JavaClass
import com.tngtech.archunit.core.domain.JavaClasses
import com.tngtech.archunit.core.importer.ClassFileImporter
import com.tngtech.archunit.core.importer.ImportOption
import spock.lang.Specification

/**
 * This test ensures that all NEW classes in the graphql package are properly annotated with JSpecify annotations.
 * It checks for the presence of @NullMarked annotation on classes.
 * 
 * Classes can be exempted from this check by adding them to the ALLOWLIST.
 */
class JSpecifyAnnotationsCheck extends Specification {

    // Allowlist of existing classes that are exempt from JSpecify annotation checks
    private static final Set<String> ALLOWLIST = [
            "graphql.Assert",
            "graphql.AssertException",
            "graphql.Directives",
            "graphql.DirectivesUtil",
            "graphql.DuckTyped",
            "graphql.ErrorClassification",
            "graphql.ErrorType",
            "graphql.ExceptionWhileDataFetching",
            "graphql.ExecutionInput",
            "graphql.ExecutionResult",
            "graphql.ExecutionResultImpl",
            "graphql.ExperimentalApi",
            "graphql.GraphQL",
            "graphql.GraphQLContext",
            "graphql.GraphQLError",
            "graphql.GraphQLException",
            "graphql.GraphqlErrorBuilder",
            "graphql.GraphqlErrorException",
            "graphql.GraphqlErrorHelper",
            "graphql.Internal",
            "graphql.InvalidSyntaxError",
            "graphql.Mutable",
            "graphql.ParseAndValidate",
            "graphql.ParseAndValidateResult",
            "graphql.PublicApi",
            "graphql.PublicSpi",
            "graphql.Scalars",
            "graphql.SerializationError",
            "graphql.ThreadSafe",
            "graphql.TrivialDataFetcher",
            "graphql.TypeMismatchError",
            "graphql.TypeResolutionEnvironment",
            "graphql.UnresolvedTypeError",
            "graphql.VisibleForTesting",
            "graphql.agent.result.ExecutionTrackingResult",
            "graphql.analysis.FieldComplexityCalculator",
            "graphql.analysis.FieldComplexityEnvironment",
            "graphql.analysis.MaxQueryComplexityInstrumentation",
            "graphql.analysis.MaxQueryDepthInstrumentation",
            "graphql.analysis.NodeVisitorWithTypeTracking",
            "graphql.analysis.QueryComplexityCalculator",
            "graphql.analysis.QueryComplexityInfo",
            "graphql.analysis.QueryDepthInfo",
            "graphql.analysis.QueryReducer",
            "graphql.analysis.QueryTransformer",
            "graphql.analysis.QueryTraversalContext",
            "graphql.analysis.QueryTraversalOptions",
            "graphql.analysis.QueryTraverser",
            "graphql.analysis.QueryVisitor",
            "graphql.analysis.QueryVisitorFieldArgumentEnvironment",
            "graphql.analysis.QueryVisitorFieldArgumentEnvironmentImpl",
            "graphql.analysis.QueryVisitorFieldArgumentInputValue",
            "graphql.analysis.QueryVisitorFieldArgumentInputValueImpl",
            "graphql.analysis.QueryVisitorFieldArgumentValueEnvironment",
            "graphql.analysis.QueryVisitorFieldArgumentValueEnvironmentImpl",
            "graphql.analysis.QueryVisitorFieldEnvironment",
            "graphql.analysis.QueryVisitorFieldEnvironmentImpl",
            "graphql.analysis.QueryVisitorFragmentDefinitionEnvironment",
            "graphql.analysis.QueryVisitorFragmentDefinitionEnvironmentImpl",
            "graphql.analysis.QueryVisitorFragmentSpreadEnvironment",
            "graphql.analysis.QueryVisitorFragmentSpreadEnvironmentImpl",
            "graphql.analysis.QueryVisitorInlineFragmentEnvironment",
            "graphql.analysis.QueryVisitorInlineFragmentEnvironmentImpl",
            "graphql.analysis.QueryVisitorStub",
            "graphql.analysis.values.ValueTraverser",
            "graphql.analysis.values.ValueVisitor",
            "graphql.collect.ImmutableKit",
            "graphql.collect.ImmutableMapWithNullValues",
            "graphql.execution.AbortExecutionException",
            "graphql.execution.AbstractAsyncExecutionStrategy",
            "graphql.execution.Async",
            "graphql.execution.AsyncExecutionStrategy",
            "graphql.execution.AsyncSerialExecutionStrategy",
            "graphql.execution.CoercedVariables",
            "graphql.execution.DataFetcherExceptionHandler",
            "graphql.execution.DataFetcherExceptionHandlerParameters",
            "graphql.execution.DataFetcherExceptionHandlerResult",
            "graphql.execution.DataFetcherResult",
            "graphql.execution.DataLoaderDispatchStrategy",
            "graphql.execution.DefaultValueUnboxer",
            "graphql.execution.EngineRunningObserver",
            "graphql.execution.Execution",
            "graphql.execution.ExecutionContext",
            "graphql.execution.ExecutionContextBuilder",
            "graphql.execution.ExecutionId",
            "graphql.execution.ExecutionIdProvider",
            "graphql.execution.ExecutionStepInfo",
            "graphql.execution.ExecutionStepInfoFactory",
            "graphql.execution.ExecutionStrategy",
            "graphql.execution.ExecutionStrategyParameters",
            "graphql.execution.FetchedValue",
            "graphql.execution.FieldCollector",
            "graphql.execution.FieldCollectorParameters",
            "graphql.execution.FieldValueInfo",
            "graphql.execution.InputMapDefinesTooManyFieldsException",
            "graphql.execution.MergedField",
            "graphql.execution.MergedSelectionSet",
            "graphql.execution.MissingRootTypeException",
            "graphql.execution.NonNullableFieldValidator",
            "graphql.execution.NonNullableFieldWasNullError",
            "graphql.execution.NonNullableFieldWasNullException",
            "graphql.execution.NonNullableValueCoercedAsNullException",
            "graphql.execution.NormalizedVariables",
            "graphql.execution.OneOfNullValueException",
            "graphql.execution.OneOfTooManyKeysException",
            "graphql.execution.RawVariables",
            "graphql.execution.ResolveType",
            "graphql.execution.ResultNodesInfo",
            "graphql.execution.ResultPath",
            "graphql.execution.SimpleDataFetcherExceptionHandler",
            "graphql.execution.SubscriptionExecutionStrategy",
            "graphql.execution.TypeFromAST",
            "graphql.execution.TypeResolutionParameters",
            "graphql.execution.UnknownOperationException",
            "graphql.execution.UnresolvedTypeException",
            "graphql.execution.ValueUnboxer",
            "graphql.execution.ValuesResolver",
            "graphql.execution.ValuesResolverConversion",
            "graphql.execution.ValuesResolverLegacy",
            "graphql.execution.ValuesResolverOneOfValidation",
            "graphql.execution.conditional.ConditionalNodeDecision",
            "graphql.execution.conditional.ConditionalNodeDecisionEnvironment",
            "graphql.execution.conditional.ConditionalNodes",
            "graphql.execution.directives.DirectivesResolver",
            "graphql.execution.directives.QueryAppliedDirective",
            "graphql.execution.directives.QueryAppliedDirectiveArgument",
            "graphql.execution.directives.QueryDirectives",
            "graphql.execution.directives.QueryDirectivesBuilder",
            "graphql.execution.directives.QueryDirectivesImpl",
            "graphql.execution.incremental.DeferredCallContext",
            "graphql.execution.incremental.DeferredExecution",
            "graphql.execution.incremental.DeferredExecutionSupport",
            "graphql.execution.incremental.DeferredFragmentCall",
            "graphql.execution.incremental.IncrementalCall",
            "graphql.execution.incremental.IncrementalCallState",
            "graphql.execution.incremental.IncrementalUtils",
            "graphql.execution.incremental.StreamedCall",
            "graphql.execution.instrumentation.ChainedInstrumentation",
            "graphql.execution.instrumentation.DocumentAndVariables",
            "graphql.execution.instrumentation.ExecuteObjectInstrumentationContext",
            "graphql.execution.instrumentation.ExecutionStrategyInstrumentationContext",
            "graphql.execution.instrumentation.FieldFetchingInstrumentationContext",
            "graphql.execution.instrumentation.Instrumentation",
            "graphql.execution.instrumentation.InstrumentationContext",
            "graphql.execution.instrumentation.InstrumentationState",
            "graphql.execution.instrumentation.NoContextChainedInstrumentation",
            "graphql.execution.instrumentation.SimpleInstrumentation",
            "graphql.execution.instrumentation.SimpleInstrumentationContext",
            "graphql.execution.instrumentation.SimplePerformantInstrumentation",
            "graphql.execution.instrumentation.dataloader.EmptyDataLoaderRegistryInstance",
            "graphql.execution.instrumentation.dataloader.FallbackDataLoaderDispatchStrategy",
            "graphql.execution.instrumentation.dataloader.LevelMap",
            "graphql.execution.instrumentation.dataloader.PerLevelDataLoaderDispatchStrategy",
            "graphql.execution.instrumentation.dataloader.PerLevelDataLoaderDispatchStrategyWithDeferAlwaysDispatch",
            "graphql.execution.instrumentation.fieldvalidation.FieldAndArguments",
            "graphql.execution.instrumentation.fieldvalidation.FieldValidation",
            "graphql.execution.instrumentation.fieldvalidation.FieldValidationEnvironment",
            "graphql.execution.instrumentation.fieldvalidation.FieldValidationInstrumentation",
            "graphql.execution.instrumentation.fieldvalidation.FieldValidationSupport",
            "graphql.execution.instrumentation.fieldvalidation.SimpleFieldValidation",
            "graphql.execution.instrumentation.parameters.InstrumentationCreateStateParameters",
            "graphql.execution.instrumentation.parameters.InstrumentationExecuteOperationParameters",
            "graphql.execution.instrumentation.parameters.InstrumentationExecutionParameters",
            "graphql.execution.instrumentation.parameters.InstrumentationExecutionStrategyParameters",
            "graphql.execution.instrumentation.parameters.InstrumentationFieldCompleteParameters",
            "graphql.execution.instrumentation.parameters.InstrumentationFieldFetchParameters",
            "graphql.execution.instrumentation.parameters.InstrumentationFieldParameters",
            "graphql.execution.instrumentation.parameters.InstrumentationValidationParameters",
            "graphql.execution.instrumentation.tracing.TracingInstrumentation",
            "graphql.execution.instrumentation.tracing.TracingSupport",
            "graphql.execution.preparsed.NoOpPreparsedDocumentProvider",
            "graphql.execution.preparsed.PreparsedDocumentEntry",
            "graphql.execution.preparsed.PreparsedDocumentProvider",
            "graphql.execution.preparsed.persisted.ApolloPersistedQuerySupport",
            "graphql.execution.preparsed.persisted.InMemoryPersistedQueryCache",
            "graphql.execution.preparsed.persisted.PersistedQueryCache",
            "graphql.execution.preparsed.persisted.PersistedQueryCacheMiss",
            "graphql.execution.preparsed.persisted.PersistedQueryError",
            "graphql.execution.preparsed.persisted.PersistedQueryIdInvalid",
            "graphql.execution.preparsed.persisted.PersistedQueryNotFound",
            "graphql.execution.preparsed.persisted.PersistedQuerySupport",
            "graphql.execution.reactive.CompletionStageMappingOrderedPublisher",
            "graphql.execution.reactive.CompletionStageMappingPublisher",
            "graphql.execution.reactive.CompletionStageOrderedSubscriber",
            "graphql.execution.reactive.CompletionStageSubscriber",
            "graphql.execution.reactive.DelegatingSubscription",
            "graphql.execution.reactive.NonBlockingMutexExecutor",
            "graphql.execution.reactive.ReactiveSupport",
            "graphql.execution.reactive.SingleSubscriberPublisher",
            "graphql.execution.reactive.SubscriptionPublisher",
            "graphql.execution.values.InputInterceptor",
            "graphql.execution.values.legacycoercing.LegacyCoercingInputInterceptor",
            "graphql.extensions.DefaultExtensionsMerger",
            "graphql.extensions.ExtensionsBuilder",
            "graphql.extensions.ExtensionsMerger",
            "graphql.i18n.I18n",
            "graphql.i18n.I18nMsg",
            "graphql.incremental.DeferPayload",
            "graphql.incremental.DelayedIncrementalPartialResult",
            "graphql.incremental.DelayedIncrementalPartialResultImpl",
            "graphql.incremental.IncrementalExecutionResult",
            "graphql.incremental.IncrementalExecutionResultImpl",
            "graphql.incremental.IncrementalPayload",
            "graphql.incremental.StreamPayload",
            "graphql.introspection.GoodFaithIntrospection",
            "graphql.introspection.Introspection",
            "graphql.introspection.IntrospectionDataFetcher",
            "graphql.introspection.IntrospectionDataFetchingEnvironment",
            "graphql.introspection.IntrospectionDisabledError",
            "graphql.introspection.IntrospectionQuery",
            "graphql.introspection.IntrospectionQueryBuilder",
            "graphql.introspection.IntrospectionResultToSchema",
            "graphql.introspection.IntrospectionWithDirectivesSupport",
            "graphql.language.AbstractDescribedNode",
            "graphql.language.AbstractNode",
            "graphql.language.Argument",
            "graphql.language.ArrayValue",
            "graphql.language.AstComparator",
            "graphql.language.AstNodeAdapter",
            "graphql.language.AstPrinter",
            "graphql.language.AstSignature",
            "graphql.language.AstSorter",
            "graphql.language.AstTransformer",
            "graphql.language.BooleanValue",
            "graphql.language.Comment",
            "graphql.language.Definition",
            "graphql.language.DescribedNode",
            "graphql.language.Description",
            "graphql.language.Directive",
            "graphql.language.DirectiveDefinition",
            "graphql.language.DirectiveLocation",
            "graphql.language.DirectivesContainer",
            "graphql.language.Document",
            "graphql.language.EnumTypeDefinition",
            "graphql.language.EnumTypeExtensionDefinition",
            "graphql.language.EnumValue",
            "graphql.language.EnumValueDefinition",
            "graphql.language.Field",
            "graphql.language.FieldDefinition",
            "graphql.language.FloatValue",
            "graphql.language.FragmentDefinition",
            "graphql.language.FragmentSpread",
            "graphql.language.IgnoredChar",
            "graphql.language.IgnoredChars",
            "graphql.language.ImplementingTypeDefinition",
            "graphql.language.InlineFragment",
            "graphql.language.InputObjectTypeDefinition",
            "graphql.language.InputObjectTypeExtensionDefinition",
            "graphql.language.InputValueDefinition",
            "graphql.language.IntValue",
            "graphql.language.InterfaceTypeDefinition",
            "graphql.language.InterfaceTypeExtensionDefinition",
            "graphql.language.ListType",
            "graphql.language.NamedNode",
            "graphql.language.Node",
            "graphql.language.NodeBuilder",
            "graphql.language.NodeChildrenContainer",
            "graphql.language.NodeDirectivesBuilder",
            "graphql.language.NodeParentTree",
            "graphql.language.NodeTraverser",
            "graphql.language.NodeUtil",
            "graphql.language.NodeVisitor",
            "graphql.language.NodeVisitorStub",
            "graphql.language.NonNullType",
            "graphql.language.NullValue",
            "graphql.language.ObjectField",
            "graphql.language.ObjectTypeDefinition",
            "graphql.language.ObjectTypeExtensionDefinition",
            "graphql.language.ObjectValue",
            "graphql.language.OperationDefinition",
            "graphql.language.OperationTypeDefinition",
            "graphql.language.PrettyAstPrinter",
            "graphql.language.SDLDefinition",
            "graphql.language.SDLExtensionDefinition",
            "graphql.language.SDLNamedDefinition",
            "graphql.language.ScalarTypeDefinition",
            "graphql.language.ScalarTypeExtensionDefinition",
            "graphql.language.ScalarValue",
            "graphql.language.SchemaDefinition",
            "graphql.language.SchemaExtensionDefinition",
            "graphql.language.Selection",
            "graphql.language.SelectionSet",
            "graphql.language.SelectionSetContainer",
            "graphql.language.SourceLocation",
            "graphql.language.StringValue",
            "graphql.language.Type",
            "graphql.language.TypeDefinition",
            "graphql.language.TypeKind",
            "graphql.language.TypeName",
            "graphql.language.UnionTypeDefinition",
            "graphql.language.UnionTypeExtensionDefinition",
            "graphql.language.Value",
            "graphql.language.VariableDefinition",
            "graphql.language.VariableReference",
            "graphql.normalized.ArgumentMaker",
            "graphql.normalized.ENFMerger",
            "graphql.normalized.ExecutableNormalizedField",
            "graphql.normalized.ExecutableNormalizedOperation",
            "graphql.normalized.ExecutableNormalizedOperationFactory",
            "graphql.normalized.ExecutableNormalizedOperationToAstCompiler",
            "graphql.normalized.NormalizedInputValue",
            "graphql.normalized.ValueToVariableValueCompiler",
            "graphql.normalized.VariableAccumulator",
            "graphql.normalized.VariablePredicate",
            "graphql.normalized.VariableValueWithDefinition",
            "graphql.normalized.incremental.NormalizedDeferredExecution",
            "graphql.normalized.nf.NormalizedDocument",
            "graphql.normalized.nf.NormalizedDocumentFactory",
            "graphql.normalized.nf.NormalizedField",
            "graphql.normalized.nf.NormalizedFieldsMerger",
            "graphql.normalized.nf.NormalizedOperation",
            "graphql.normalized.nf.NormalizedOperationToAstCompiler",
            "graphql.parser.AntlrHelper",
            "graphql.parser.CommentParser",
            "graphql.parser.ExtendedBailStrategy",
            "graphql.parser.GraphqlAntlrToLanguage",
            "graphql.parser.InvalidSyntaxException",
            "graphql.parser.MultiSourceReader",
            "graphql.parser.NodeToRuleCapturingParser",
            "graphql.parser.Parser",
            "graphql.parser.ParserEnvironment",
            "graphql.parser.ParserOptions",
            "graphql.parser.ParsingListener",
            "graphql.parser.SafeTokenReader",
            "graphql.parser.SafeTokenSource",
            "graphql.parser.StringValueParsing",
            "graphql.parser.UnicodeUtil",
            "graphql.parser.exceptions.InvalidUnicodeSyntaxException",
            "graphql.parser.exceptions.MoreTokensSyntaxException",
            "graphql.parser.exceptions.ParseCancelledException",
            "graphql.parser.exceptions.ParseCancelledTooDeepException",
            "graphql.parser.exceptions.ParseCancelledTooManyCharsException",
            "graphql.relay.Connection",
            "graphql.relay.ConnectionCursor",
            "graphql.relay.DefaultConnection",
            "graphql.relay.DefaultConnectionCursor",
            "graphql.relay.DefaultEdge",
            "graphql.relay.DefaultPageInfo",
            "graphql.relay.Edge",
            "graphql.relay.InvalidCursorException",
            "graphql.relay.InvalidPageSizeException",
            "graphql.relay.PageInfo",
            "graphql.relay.Relay",
            "graphql.relay.SimpleListConnection",
            "graphql.scalar.CoercingUtil",
            "graphql.scalar.GraphqlBooleanCoercing",
            "graphql.scalar.GraphqlFloatCoercing",
            "graphql.scalar.GraphqlIDCoercing",
            "graphql.scalar.GraphqlIntCoercing",
            "graphql.scalar.GraphqlStringCoercing",
            "graphql.schema.AsyncDataFetcher",
            "graphql.schema.CodeRegistryVisitor",
            "graphql.schema.Coercing",
            "graphql.schema.CoercingParseLiteralException",
            "graphql.schema.CoercingParseValueException",
            "graphql.schema.CoercingSerializeException",
            "graphql.schema.DataFetcher",
            "graphql.schema.DataFetcherFactories",
            "graphql.schema.DataFetcherFactory",
            "graphql.schema.DataFetcherFactoryEnvironment",
            "graphql.schema.DataFetchingEnvironment",
            "graphql.schema.DataFetchingEnvironmentImpl",
            "graphql.schema.DataFetchingFieldSelectionSet",
            "graphql.schema.DataFetchingFieldSelectionSetImpl",
            "graphql.schema.DefaultGraphqlTypeComparatorRegistry",
            "graphql.schema.DelegatingDataFetchingEnvironment",
            "graphql.schema.FieldCoordinates",
            "graphql.schema.GraphQLAppliedDirective",
            "graphql.schema.GraphQLAppliedDirectiveArgument",
            "graphql.schema.GraphQLArgument",
            "graphql.schema.GraphQLCodeRegistry",
            "graphql.schema.GraphQLCompositeType",
            "graphql.schema.GraphQLDirective",
            "graphql.schema.GraphQLDirectiveContainer",
            "graphql.schema.GraphQLEnumType",
            "graphql.schema.GraphQLEnumValueDefinition",
            "graphql.schema.GraphQLFieldDefinition",
            "graphql.schema.GraphQLFieldsContainer",
            "graphql.schema.GraphQLImplementingType",
            "graphql.schema.GraphQLInputFieldsContainer",
            "graphql.schema.GraphQLInputObjectField",
            "graphql.schema.GraphQLInputObjectType",
            "graphql.schema.GraphQLInputSchemaElement",
            "graphql.schema.GraphQLInputType",
            "graphql.schema.GraphQLInputValueDefinition",
            "graphql.schema.GraphQLInterfaceType",
            "graphql.schema.GraphQLList",
            "graphql.schema.GraphQLModifiedType",
            "graphql.schema.GraphQLNamedInputType",
            "graphql.schema.GraphQLNamedOutputType",
            "graphql.schema.GraphQLNamedSchemaElement",
            "graphql.schema.GraphQLNamedType",
            "graphql.schema.GraphQLNonNull",
            "graphql.schema.GraphQLNullableType",
            "graphql.schema.GraphQLObjectType",
            "graphql.schema.GraphQLOutputType",
            "graphql.schema.GraphQLScalarType",
            "graphql.schema.GraphQLSchema",
            "graphql.schema.GraphQLSchemaElement",
            "graphql.schema.GraphQLSchemaElementAdapter",
            "graphql.schema.GraphQLType",
            "graphql.schema.GraphQLTypeReference",
            "graphql.schema.GraphQLTypeResolvingVisitor",
            "graphql.schema.GraphQLTypeUtil",
            "graphql.schema.GraphQLTypeVisitor",
            "graphql.schema.GraphQLTypeVisitorStub",
            "graphql.schema.GraphQLUnionType",
            "graphql.schema.GraphQLUnmodifiedType",
            "graphql.schema.GraphqlDirectivesContainerTypeBuilder",
            "graphql.schema.GraphqlElementParentTree",
            "graphql.schema.GraphqlTypeBuilder",
            "graphql.schema.GraphqlTypeComparatorEnvironment",
            "graphql.schema.GraphqlTypeComparatorRegistry",
            "graphql.schema.GraphqlTypeComparators",
            "graphql.schema.InputValueWithState",
            "graphql.schema.LightDataFetcher",
            "graphql.schema.PropertyDataFetcher",
            "graphql.schema.PropertyDataFetcherHelper",
            "graphql.schema.PropertyFetchingImpl",
            "graphql.schema.SchemaElementChildrenContainer",
            "graphql.schema.SchemaTransformer",
            "graphql.schema.SchemaTraverser",
            "graphql.schema.SelectedField",
            "graphql.schema.SingletonPropertyDataFetcher",
            "graphql.schema.StaticDataFetcher",
            "graphql.schema.TypeResolver",
            "graphql.schema.TypeResolverProxy",
            "graphql.schema.diff.DiffCategory",
            "graphql.schema.diff.DiffCtx",
            "graphql.schema.diff.DiffEvent",
            "graphql.schema.diff.DiffLevel",
            "graphql.schema.diff.DiffSet",
            "graphql.schema.diff.SchemaDiff",
            "graphql.schema.diff.SchemaDiffSet",
            "graphql.schema.diff.reporting.CapturingReporter",
            "graphql.schema.diff.reporting.ChainedReporter",
            "graphql.schema.diff.reporting.DifferenceReporter",
            "graphql.schema.diff.reporting.PrintStreamReporter",
            "graphql.schema.diffing.DiffImpl",
            "graphql.schema.diffing.Edge",
            "graphql.schema.diffing.EditOperation",
            "graphql.schema.diffing.EditorialCostForMapping",
            "graphql.schema.diffing.HungarianAlgorithm",
            "graphql.schema.diffing.Mapping",
            "graphql.schema.diffing.PossibleMappingsCalculator",
            "graphql.schema.diffing.SchemaDiffing",
            "graphql.schema.diffing.SchemaDiffingCancelledException",
            "graphql.schema.diffing.SchemaDiffingRunningCheck",
            "graphql.schema.diffing.SchemaGraph",
            "graphql.schema.diffing.SchemaGraphFactory",
            "graphql.schema.diffing.SortSourceGraph",
            "graphql.schema.diffing.Util",
            "graphql.schema.diffing.Vertex",
            "graphql.schema.diffing.ana.EditOperationAnalysisResult",
            "graphql.schema.diffing.ana.EditOperationAnalyzer",
            "graphql.schema.diffing.ana.SchemaDifference",
            "graphql.schema.fetching.LambdaFetchingSupport",
            "graphql.schema.idl.ArgValueOfAllowedTypeChecker",
            "graphql.schema.idl.CombinedWiringFactory",
            "graphql.schema.idl.DirectiveInfo",
            "graphql.schema.idl.EchoingWiringFactory",
            "graphql.schema.idl.EnumValuesProvider",
            "graphql.schema.idl.FieldWiringEnvironment",
            "graphql.schema.idl.ImplementingTypesChecker",
            "graphql.schema.idl.InterfaceWiringEnvironment",
            "graphql.schema.idl.MapEnumValuesProvider",
            "graphql.schema.idl.MockedWiringFactory",
            "graphql.schema.idl.NaturalEnumValuesProvider",
            "graphql.schema.idl.NoopWiringFactory",
            "graphql.schema.idl.RuntimeWiring",
            "graphql.schema.idl.ScalarInfo",
            "graphql.schema.idl.ScalarWiringEnvironment",
            "graphql.schema.idl.SchemaDirectiveWiring",
            "graphql.schema.idl.SchemaDirectiveWiringEnvironment",
            "graphql.schema.idl.SchemaDirectiveWiringEnvironmentImpl",
            "graphql.schema.idl.SchemaDirectiveWiringSchemaGeneratorPostProcessing",
            "graphql.schema.idl.SchemaExtensionsChecker",
            "graphql.schema.idl.SchemaGenerator",
            "graphql.schema.idl.SchemaGeneratorAppliedDirectiveHelper",
            "graphql.schema.idl.SchemaGeneratorDirectiveHelper",
            "graphql.schema.idl.SchemaGeneratorHelper",
            "graphql.schema.idl.SchemaParseOrder",
            "graphql.schema.idl.SchemaParser",
            "graphql.schema.idl.SchemaPrinter",
            "graphql.schema.idl.SchemaTypeChecker",
            "graphql.schema.idl.SchemaTypeDirectivesChecker",
            "graphql.schema.idl.SchemaTypeExtensionsChecker",
            "graphql.schema.idl.TypeDefinitionRegistry",
            "graphql.schema.idl.TypeInfo",
            "graphql.schema.idl.TypeRuntimeWiring",
            "graphql.schema.idl.TypeUtil",
            "graphql.schema.idl.UnExecutableSchemaGenerator",
            "graphql.schema.idl.UnionTypesChecker",
            "graphql.schema.idl.UnionWiringEnvironment",
            "graphql.schema.idl.WiringEnvironment",
            "graphql.schema.idl.WiringFactory",
            "graphql.schema.idl.errors.BaseError",
            "graphql.schema.idl.errors.DirectiveIllegalArgumentTypeError",
            "graphql.schema.idl.errors.DirectiveIllegalLocationError",
            "graphql.schema.idl.errors.DirectiveIllegalReferenceError",
            "graphql.schema.idl.errors.DirectiveMissingNonNullArgumentError",
            "graphql.schema.idl.errors.DirectiveRedefinitionError",
            "graphql.schema.idl.errors.DirectiveUndeclaredError",
            "graphql.schema.idl.errors.DirectiveUnknownArgumentError",
            "graphql.schema.idl.errors.IllegalNameError",
            "graphql.schema.idl.errors.InterfaceFieldArgumentNotOptionalError",
            "graphql.schema.idl.errors.InterfaceFieldArgumentRedefinitionError",
            "graphql.schema.idl.errors.InterfaceFieldRedefinitionError",
            "graphql.schema.idl.errors.InterfaceImplementedMoreThanOnceError",
            "graphql.schema.idl.errors.InterfaceImplementingItselfError",
            "graphql.schema.idl.errors.InterfaceWithCircularImplementationHierarchyError",
            "graphql.schema.idl.errors.MissingInterfaceFieldArgumentsError",
            "graphql.schema.idl.errors.MissingInterfaceFieldError",
            "graphql.schema.idl.errors.MissingInterfaceTypeError",
            "graphql.schema.idl.errors.MissingScalarImplementationError",
            "graphql.schema.idl.errors.MissingTransitiveInterfaceError",
            "graphql.schema.idl.errors.MissingTypeError",
            "graphql.schema.idl.errors.MissingTypeResolverError",
            "graphql.schema.idl.errors.NonSDLDefinitionError",
            "graphql.schema.idl.errors.NonUniqueArgumentError",
            "graphql.schema.idl.errors.NonUniqueDirectiveError",
            "graphql.schema.idl.errors.NonUniqueNameError",
            "graphql.schema.idl.errors.NotAnInputTypeError",
            "graphql.schema.idl.errors.NotAnOutputTypeError",
            "graphql.schema.idl.errors.OperationRedefinitionError",
            "graphql.schema.idl.errors.OperationTypesMustBeObjects",
            "graphql.schema.idl.errors.QueryOperationMissingError",
            "graphql.schema.idl.errors.SchemaMissingError",
            "graphql.schema.idl.errors.SchemaProblem",
            "graphql.schema.idl.errors.SchemaRedefinitionError",
            "graphql.schema.idl.errors.StrictModeWiringException",
            "graphql.schema.idl.errors.TypeExtensionDirectiveRedefinitionError",
            "graphql.schema.idl.errors.TypeExtensionEnumValueRedefinitionError",
            "graphql.schema.idl.errors.TypeExtensionFieldRedefinitionError",
            "graphql.schema.idl.errors.TypeExtensionMissingBaseTypeError",
            "graphql.schema.idl.errors.TypeRedefinitionError",
            "graphql.schema.idl.errors.UnionTypeError",
            "graphql.schema.impl.GraphQLTypeCollectingVisitor",
            "graphql.schema.impl.MultiReadOnlyGraphQLTypeVisitor",
            "graphql.schema.impl.SchemaUtil",
            "graphql.schema.impl.StronglyConnectedComponentsTopologicallySorted",
            "graphql.schema.transform.FieldVisibilitySchemaTransformation",
            "graphql.schema.transform.VisibleFieldPredicate",
            "graphql.schema.transform.VisibleFieldPredicateEnvironment",
            "graphql.schema.usage.SchemaUsage",
            "graphql.schema.usage.SchemaUsageSupport",
            "graphql.schema.validation.AppliedDirectiveArgumentsAreValid",
            "graphql.schema.validation.AppliedDirectivesAreValid",
            "graphql.schema.validation.DefaultValuesAreValid",
            "graphql.schema.validation.DeprecatedInputObjectAndArgumentsAreValid",
            "graphql.schema.validation.InputAndOutputTypesUsedAppropriately",
            "graphql.schema.validation.InvalidSchemaException",
            "graphql.schema.validation.NoUnbrokenInputCycles",
            "graphql.schema.validation.OneOfInputObjectRules",
            "graphql.schema.validation.SchemaValidationError",
            "graphql.schema.validation.SchemaValidationErrorClassification",
            "graphql.schema.validation.SchemaValidationErrorCollector",
            "graphql.schema.validation.SchemaValidationErrorType",
            "graphql.schema.validation.SchemaValidator",
            "graphql.schema.validation.TypeAndFieldRule",
            "graphql.schema.validation.TypesImplementInterfaces",
            "graphql.schema.visibility.BlockedFields",
            "graphql.schema.visibility.DefaultGraphqlFieldVisibility",
            "graphql.schema.visibility.GraphqlFieldVisibility",
            "graphql.schema.visibility.NoIntrospectionGraphqlFieldVisibility",
            "graphql.schema.visitor.GraphQLSchemaTraversalControl",
            "graphql.schema.visitor.GraphQLSchemaVisitor",
            "graphql.schema.visitor.GraphQLSchemaVisitorAdapter",
            "graphql.schema.visitor.GraphQLSchemaVisitorEnvironment",
            "graphql.schema.visitor.GraphQLSchemaVisitorEnvironmentImpl",
            "graphql.util.Anonymizer",
            "graphql.util.Breadcrumb",
            "graphql.util.CyclicSchemaAnalyzer",
            "graphql.util.DefaultTraverserContext",
            "graphql.util.EscapeUtil",
            "graphql.util.FpKit",
            "graphql.util.IdGenerator",
            "graphql.util.InterThreadMemoizedSupplier",
            "graphql.util.Interning",
            "graphql.util.IntraThreadMemoizedSupplier",
            "graphql.util.LockKit",
            "graphql.util.MutableRef",
            "graphql.util.NodeAdapter",
            "graphql.util.NodeLocation",
            "graphql.util.NodeMultiZipper",
            "graphql.util.NodeZipper",
            "graphql.util.Pair",
            "graphql.util.ReplaceNode",
            "graphql.util.StringKit",
            "graphql.util.TraversalControl",
            "graphql.util.Traverser",
            "graphql.util.TraverserContext",
            "graphql.util.TraverserResult",
            "graphql.util.TraverserState",
            "graphql.util.TraverserVisitor",
            "graphql.util.TraverserVisitorStub",
            "graphql.util.TreeParallelTransformer",
            "graphql.util.TreeParallelTraverser",
            "graphql.util.TreeTransformer",
            "graphql.util.TreeTransformerUtil",
            "graphql.validation.AbstractRule",
            "graphql.validation.ArgumentValidationUtil",
            "graphql.validation.DocumentVisitor",
            "graphql.validation.LanguageTraversal",
            "graphql.validation.RulesVisitor",
            "graphql.validation.TraversalContext",
            "graphql.validation.ValidationContext",
            "graphql.validation.ValidationError",
            "graphql.validation.ValidationErrorClassification",
            "graphql.validation.ValidationErrorCollector",
            "graphql.validation.ValidationErrorType",
            "graphql.validation.ValidationUtil",
            "graphql.validation.Validator",
            "graphql.validation.rules.ArgumentsOfCorrectType",
            "graphql.validation.rules.DeferDirectiveLabel",
            "graphql.validation.rules.DeferDirectiveOnRootLevel",
            "graphql.validation.rules.DeferDirectiveOnValidOperation",
            "graphql.validation.rules.ExecutableDefinitions",
            "graphql.validation.rules.FieldsOnCorrectType",
            "graphql.validation.rules.FragmentsOnCompositeType",
            "graphql.validation.rules.KnownArgumentNames",
            "graphql.validation.rules.KnownDirectives",
            "graphql.validation.rules.KnownFragmentNames",
            "graphql.validation.rules.KnownOperationTypes",
            "graphql.validation.rules.KnownTypeNames",
            "graphql.validation.rules.LoneAnonymousOperation",
            "graphql.validation.rules.NoFragmentCycles",
            "graphql.validation.rules.NoUndefinedVariables",
            "graphql.validation.rules.NoUnusedFragments",
            "graphql.validation.rules.NoUnusedVariables",
            "graphql.validation.rules.OverlappingFieldsCanBeMerged",
            "graphql.validation.rules.PossibleFragmentSpreads",
            "graphql.validation.rules.ProvidedNonNullArguments",
            "graphql.validation.rules.ScalarLeaves",
            "graphql.validation.rules.SubscriptionRootField",
            "graphql.validation.rules.UniqueArgumentNames",
            "graphql.validation.rules.UniqueDirectiveNamesPerLocation",
            "graphql.validation.rules.UniqueFragmentNames",
            "graphql.validation.rules.UniqueObjectFieldName",
            "graphql.validation.rules.UniqueOperationNames",
            "graphql.validation.rules.UniqueVariableNames",
            "graphql.validation.rules.VariableDefaultValuesOfCorrectType",
            "graphql.validation.rules.VariableTypesMatch",
            "graphql.validation.rules.VariablesAreInputTypes",
            "graphql.validation.rules.VariablesTypesMatcher",
    ]

    def "should ensure all new classes have @NullMarked annotation"() {
        given:
        // Get all classes in the graphql package
        JavaClasses allClasses = new ClassFileImporter()
                .withImportOption(ImportOption.Predefined.DO_NOT_INCLUDE_TESTS)
                .importPackages("graphql")
        
        // Filter out allowlisted classes
        def newClasses = allClasses.stream()
                .filter { javaClass -> !ALLOWLIST.contains(javaClass.name) }
                .collect()

        when:
        List<String> classesMissingAnnotation = []

        newClasses.each { JavaClass javaClass ->
            // Check if class has @NullMarked annotation
            if (!javaClass.isAnnotatedWith("org.jspecify.annotations.NullMarked")) {
                classesMissingAnnotation.add(javaClass.name)
            }
        }

        then:
        classesMissingAnnotation.isEmpty()

        cleanup: "if the test fails, provide detailed information about which classes have violations"
        if (!classesMissingAnnotation.isEmpty()) {
            def errorMessage = new StringBuilder("Classes missing @NullMarked annotation:\n")

            classesMissingAnnotation.each { className ->
                errorMessage.append("  - ${className}\n")
            }

            errorMessage.append("\nTo fix these issues:\n")
            errorMessage.append("1. Add @NullMarked to classes\n")
            errorMessage.append("2. Add @Nullable annotations for nullable elements within that class\n")

            println errorMessage.toString()
        }
    }
} 